/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.rdfdsl.scoping

import org.eclipse.xtext.scoping.IScope
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.xtext.example.rdfdsl.rdfDsl._Class
import org.xtext.example.rdfdsl.rdfDsl.RdfDslPackage.Literals
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import org.xtext.example.rdfdsl.rdfDsl.Namespace
import java.util.ArrayList
import java.util.HashSet
import java.util.Collections
import java.util.List


/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class RdfDslScopeProvider extends AbstractRdfDslScopeProvider {
	override IScope getScope(EObject context, EReference reference) {
		switch context {
			_Class case reference == Literals._CLASS__SUPER_CLASS: {
				var model = EcoreUtil2.getContainerOfType(context, Namespace)
				var candidates = new ArrayList<_Class>
				
				for (cl : model.classes) {
					if (!cl.equals(context)) {
						candidates.add(cl)
					}
				}
				
				return Scopes.scopeFor(candidates)
			}
		}
	}

/*def List<_Class> allSuperClasses(_Class theClass){
 * 	var seen = new HashSet<_Class>
 * 	var candidates = new ArrayList<_Class>
 * 	var c = theClass
 * 	//System.out.println("c before "+c.name)
 * 	//System.out.println("c.super "+c.superClass)
 * 	while(c !== null){
 * 		if(seen.contains(c)){
 * 			return Collections.EMPTY_LIST
 * 		}
 * 		seen.add(c)
 * 		candidates.add(c)
 * 		c = c.superClass
 * 		System.out.println("c "+c)
 * 		System.out.println("seen "+seen)
 * 		System.out.println("candidates "+candidates)
 * 	}
 * 	return candidates
 * 	
 }*/
}
