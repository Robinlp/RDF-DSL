/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.rdfdsl.validation

import java.util.ArrayList
import java.util.HashSet
import java.util.List
import org.eclipse.xtext.validation.Check
import org.xtext.example.rdfdsl.rdfDsl.DataNamespace
import org.xtext.example.rdfdsl.rdfDsl.PropertyBinding
import org.xtext.example.rdfdsl.rdfDsl.QueryInstance
import org.xtext.example.rdfdsl.rdfDsl.RdfDslPackage
import org.xtext.example.rdfdsl.rdfDsl._Class
import org.xtext.example.rdfdsl.rdfDsl._Property
import org.xtext.example.rdfdsl.rdfDsl.Binding
import org.xtext.example.rdfdsl.rdfDsl.From
import org.xtext.example.rdfdsl.rdfDsl.DataProperty

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class RdfDslValidator extends AbstractRdfDslValidator {

	public static String[] Python_Keywords = #["and", "as", "assert", "break", "class", "continue", "def", "del",
		"elif", "else", "except", "False", "finally", "for", "from", "global", "if", "import", "in", "is", "lambda",
		"None", "nonlocal", "not", "or", "pass", "raise", "return", "True", "try", "while", "with", "yield"]
	public List<String> allBindings = new ArrayList();
	
	@Check
	def idContainsKeyword(QueryInstance qins) {
		if (Python_Keywords.contains(qins.id)) {
			error('Name cannot contain python keywords', RdfDslPackage.Literals.QUERY_INSTANCE__ID, "Keyword Error")
		}
	}

	@Check
	def paramsContainsKeyword(QueryInstance qins) {
		for (param : qins.params) {
			if (Python_Keywords.contains(param)) {
				error('Parameters cannot contain python keywords. Error at: ' + param,
					RdfDslPackage.Literals.QUERY_INSTANCE__PARAMS, "Keyword Error")
			}
		}
	}

	/*Find all bindings and add them to the allBindings list so bindingHasBeenDefined can use the list */
	@Check
	def findBindings(DataNamespace dataNs) {
		allBindings.clear()
		for (binding : dataNs.bindings) {
			for (varL : binding.varList) {
				allBindings.addAll(varL)
			}
		}
	}

	/*this method will validate if the proberty binding has been defined as a binding first */
	@Check
	def bindingHasBeenDefined(PropertyBinding pb) {
		// System.out.println(allBindings)
		if (!allBindings.contains(pb.name)) {
			error("The property binding has not been defined as a binding. Error at: " + pb.name,
				RdfDslPackage.Literals.PROPERTY_BINDING__NAME, "PropertyBinding error")
		}
	}

	@Check
	def checkCyclicInheritance(_Class theClass) {
		var seen = new HashSet<_Class>
		var c = theClass
		while (c !== null) {
			if (seen.contains(c)) {
				error("cyclic inheritance", RdfDslPackage.Literals._CLASS__SUPER_CLASS, "superClass error")
				return
			}
			seen.add(c)
			c = c.superClass
		}
	}
	
	@Check
	def classNameContainsKeyword(_Class c) {
		if (Python_Keywords.contains(c.name)) {
			error('Name cannot contain python keywords', RdfDslPackage.Literals._CLASS__NAME, "Keyword Error")
		}
	}
	
	@Check
	def propertyNameContainsKeyword(_Property p) {
		if (Python_Keywords.contains(p.name)) {
			error('Name cannot contain python keywords', RdfDslPackage.Literals._PROPERTY__NAME, "Keyword Error")
		}
	}
	
	@Check
	def bindingsContainsKeyword(Binding b) {
		for (bind : b.varList) {
			if (Python_Keywords.contains(bind)) {
				error('Parameters cannot contain python keywords. Error at: ' + bind,
					RdfDslPackage.Literals.BINDING__VAR_LIST, "Keyword Error")
			}
		}
	}
	
	@Check
	def propertyBindingNameContainsKeyword(PropertyBinding pb) {
		if (Python_Keywords.contains(pb.name)) {
			error('Name cannot contain python keywords', RdfDslPackage.Literals.PROPERTY_BINDING__NAME, "Keyword Error")
		}
	}
	
	@Check
	def dataPropertyPropContainsKeyword(DataProperty dp) {
		if (Python_Keywords.contains(dp.prop)) {
			error('Name cannot contain python keywords', RdfDslPackage.Literals.DATA_PROPERTY__PROP, "Keyword Error")
		}
	}
	
	@Check
	def fromContainsKeyword(From f) {
		for (p : f.listProp) {
			if (Python_Keywords.contains(p)) {
				error('Parameters cannot contain python keywords. Error at: ' + p,
					RdfDslPackage.Literals.FROM__LIST_PROP, "Keyword Error")
			}
		}
	}

}
