grammar org.xtext.example.rdfdsl.RdfDsl with org.eclipse.xtext.common.Terminals

generate rdfDsl "http://www.xtext.org/example/rdfdsl/RdfDsl"


//#################################################[GENERAL]#################################################

Root:
	(model=Model)? (data=Data)? (query=Query)?;

Link:
	URL;

URL:
	STRING;

//##################################################[MODEL]##################################################

Model:
	'model' namespaces+=Namespace+;

Namespace:
	'namespace' name=ID link=Link (classes+=Class)*;

Class returns _Class:
	{_Class}'class' name=ID (':' superClass=[_Class])? (properties+=Property)*;

Property returns _Property:
	'property' name=ID type=(ObjectType | SimpleType) (cardinality=Cardinality)?; // default card is 0..*

ObjectType returns Type:
	{ClassRef} id=ID;

SimpleType returns Type:
	{_String} 'String' | {_Integer} 'Integer' | {_Float} 'Float' | {_Boolean} 'Boolean';

Cardinality:
	'cardinality' min=INT '..' max=Entries;

Entries:
	INT | '*';
	
//##################################################[DATA]##################################################
	
Data:
	'data' namespaces+=DataNamespace+;

DataNamespace:
	'namespace' name=ID link=Link (from=From)? (bindings+=Binding)* (propBind+=PropertyBinding)+;

From:
	'from' importedNs=Link '[' listProp+=ID+ (',' listProp+=ID)*']';
	
Binding:
	varList+=ID (',' varList+=ID)* 'is' entity=ID;
	
PropertyBinding:
	name=ID ':' property+=DataProperty+;

DataProperty:
	prop=ID ((value+=ID (',' value+=ID)*) | sValue=SimpleValue)
;

SimpleValue:
	INT | STRING | BOOL;

BOOL:
	'True' | 'False';

//##################################################[Query]##################################################

Query:
	'query' namespaces+=QueryNamespace+ instances+=QueryInstance+;

QueryNamespace:
	'from' id=ID url=STRING;

QueryInstance:
	id=ID (params+=ID)* select=Select;

Select:
	'SELECT' selectList+=ID (',' selectList+=ID)* where=Where;

Where:
	'WHERE' constraintList+=Triple+;

Triple:
	subject=ID predicate=Predicate object=QueryObject;

Predicate:
	namespace=ID ':' property=ID;

QueryObject:
	{QueryID} id=ID | {QueryLiteral} id=STRING | {QueryBool} id=BOOL | {QueryExpression} id=Exp;


//##################################################[Math expressions]##################################################

Exp returns Expression:
	MultDiv (('+' {Plus.left=current} | '-' {Minus.left=current} ) right=MultDiv)*
;

MultDiv returns Expression:
	Primary (('*' {Mult.left=current} | '/' {Div.left=current} ) right=Primary)*
;

Primary returns Expression:
	Number | Parenthesis
;

Parenthesis returns Expression:
	'(' Exp ')'
;

Number returns Expression:
	{Num} value=INT
;












